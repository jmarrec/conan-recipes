diff --git a/ext/openssl/extconf.rb b/ext/openssl/extconf.rb
--- ext/openssl/extconf.rb
+++ ext/openssl/extconf.rb
@@ -98,6 +98,7 @@ def find_openssl_library
 end
 
 Logging::message "=== Checking for required stuff... ===\n"
+Logging::message "dir_config_given: #{dir_config_given}"
 pkg_config_found = !dir_config_given && pkg_config("openssl") && have_header("openssl/ssl.h")
 
 # Force finding the PKG config anyways because we want to grab the one
diff --git a/lib/mkmf.rb b/lib/mkmf.rb
--- lib/mkmf.rb
+++ lib/mkmf.rb
@@ -404,13 +404,15 @@ MESSAGE
   end
 
   def env_quote(envs)
-    envs.map {|e, v| "#{e}=#{v.quote}"}
+    envs.map {|e, v| "$env:#{e}=\"#{v.quote}\""}
   end
 
   def xsystem command, opts = nil
     env, command = expand_command(command)
     Logging::open do
-      puts [env_quote(env), command.quote].join(' ')
+      puts "======"
+      puts env_quote(env).join('\n')
+      puts command.quote
       if opts and opts[:werror]
         result = nil
         Logging.postpone do |log|
@@ -568,7 +570,10 @@ MSG
 
   def try_link0(src, opt="", *opts, &b) # :nodoc:
     exe = CONFTEST+$EXEEXT
-    # Retrieve ldflags from opts
+    Logging.message("\n====== try_link0 ======\n")
+    Logging.message("src = %s\n", src)
+    Logging.message("opt = %s\n", opt)
+    Logging.message("opts = %s\n", opts)
     ldflags = ""
     opts.each do |h|
       if h.is_a?(Hash) && h.key?(:ldflags)
@@ -577,6 +582,7 @@ MSG
       end
     end
     cmd = link_command(ldflags, opt)
+    Logging.message("Trying #{exe}: #{cmd}\n")
     if $universal
       require 'tmpdir'
       Dir.mktmpdir("mkmf_", oldtmpdir = ENV["TMPDIR"]) do |tmpdir|
@@ -1807,11 +1813,14 @@ SRC
   # application.
   #
   def dir_config(target, idefault=nil, ldefault=nil)
+    Logging.message("dir_config: target = %s, idefault = %s, ldefault= %s\n", target, idefault, ldefault)
     if conf = $config_dirs[target]
+      Logging.message("Found cached in $config_dirs = %s\n", conf)
       return conf
     end
 
     if dir = with_config(target + "-dir", (idefault unless ldefault))
+      Logging.message("with-%s-dir passed: %s\n", target, dir)
       defaults = Array === dir ? dir : dir.split(File::PATH_SEPARATOR)
       idefault = ldefault = nil
     end
@@ -1841,6 +1850,7 @@ SRC
     end
     $LIBPATH = ldirs | $LIBPATH
 
+    Logging.message("Caching as: [%s, %s]\n", idir, ldir)
     $config_dirs[target] = [idir, ldir]
   end
 
@@ -1864,14 +1874,36 @@ SRC
   # invoked with the options and a stripped output string is returned without
   # modifying any of the global values mentioned above.
   def pkg_config(pkg, *options)
+    Logging.message("pkg-config for %s, options=%s\n", pkg, options)
     _, ldir = dir_config(pkg)
     if ldir
+      Logging.message("pkg_config: ldir = %s\n", ldir)
       pkg_config_path = "#{ldir}/pkgconfig"
       if File.directory?(pkg_config_path)
         Logging.message("PKG_CONFIG_PATH = %s\n", pkg_config_path)
         envs = ["PKG_CONFIG_PATH"=>[pkg_config_path, ENV["PKG_CONFIG_PATH"]].compact.join(File::PATH_SEPARATOR)]
       end
     end
+
+    pkgconfig = with_config("#{pkg}-config")
+    Logging.message("--with-#{pkg}-config: '%s'\n", pkgconfig)
+    if pkgconfig
+      pkg_config_exe = find_executable0(pkgconfig)
+      Logging.message("pkg_config_exe: %s\n", pkg_config_exe)
+    end
+    Logging.message("$PKGCONFIG = %s\n", $PKGCONFIG)
+    Logging.message("--with-pkg-config = %s\n", with_config("pkg-config"))
+    Logging.message("config_string('PKG_CONFIG') = %s\n", config_string("PKG_CONFIG"))
+    Logging.message("ENV['PKG_CONFIG'] = %s\n", ENV['PKG_CONFIG'])
+
+    $PKGCONFIG ||= (pkgconfig = with_config("pkg-config") {config_string("PKG_CONFIG") || ENV["PKG_CONFIG"] || "pkg-config"})
+    Logging.message("$PKGCONFIG = %s\n", $PKGCONFIG)
+    if $PKGCONFIG
+      Logging.message("xsystem([*envs, $PKGCONFIG, '--exists', pkg]) = %s\n", xsystem([*envs, $PKGCONFIG, "--exists", pkg]))
+      envs2 = ["PKG_CONFIG_PATH"=> ENV["PKG_CONFIG_PATH"]]
+      Logging.message("xsystem([*envs2, $PKGCONFIG, '--exists', pkg]) = %s\n", xsystem([*envs2, $PKGCONFIG, "--exists", pkg]))
+    end
+
     if pkgconfig = with_config("#{pkg}-config") and find_executable0(pkgconfig)
       # if and only if package specific config command is given
     elsif ($PKGCONFIG ||=
@@ -1886,14 +1918,19 @@ SRC
     else
       pkgconfig = nil
     end
+    Logging.message("$PKGCONFIG = %s\n", $PKGCONFIG)
+    Logging.message("pkgconfig = %s\n", pkgconfig)
+    Logging.message("ENV PKG_CONFIG_PATH = %s\n", ENV["PKG_CONFIG_PATH"])
+    Logging.message("$mswin = %s\n", $mswin)
     if pkgconfig
       has_ms_win_syntax = false
       if $mswin
         has_ms_win_syntax = xpopen([pkgconfig, "--help"]).read.include?('msvc-syntax')
         if has_ms_win_syntax
           args << "--msvc-syntax"
+          Logging.message("Enabling --msvc-syntax flag\n")
         else
-          Logging.message("WARNING: #{pkgconfig} does not support the --msvc-syntax. Try using a recent pkgconf instead")
+          Logging.message("WARNING: #{pkgconfig} does not support the --msvc-syntax. Try using a recent pkgconf instead.")
         end
       end
       get = proc {|opts|
@@ -1918,6 +1955,10 @@ SRC
       }
     end
     orig_ldflags = $LDFLAGS
+    # Ideally should really do --libs-only-L  and --libs-only-l from the get
+    # go and use that in a modified try_ldflags so they isn't an issue
+    # ordering the link command
+    Logging.message("orig_ldflags = %s\n", orig_ldflags)
     if get and !options.empty?
       get[options]
     elsif get and try_ldflags(ldflags = get['libs'])
-- 
2.43.0

